// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

interface IBridge {
    function sendMessage(uint256 _amount, address _token, address _recipient, uint256 _destinationChain) external;
}

contract CrossChainBridge is Ownable {
    IBridge public bridge;
    mapping(bytes32 => bool) public processedMessages;
    
    event TokensLocked(address indexed user, uint256 amount, address token, uint256 destinationChain, bytes32 messageId);
    event TokensUnlocked(address indexed user, uint256 amount, address token, bytes32 messageId);
    
    constructor(address _bridge) {
        bridge = IBridge(_bridge);
    }
    
    function lockTokens(address token, uint256 amount, address recipient, uint256 destinationChain) external {
        require(amount > 0, "Amount must be greater than zero");
        require(IERC20(token).transferFrom(msg.sender, address(this), amount), "Transfer failed");
        
        bytes32 messageId = keccak256(abi.encodePacked(msg.sender, amount, token, recipient, destinationChain, block.timestamp));
        emit TokensLocked(msg.sender, amount, token, destinationChain, messageId);
        
        bridge.sendMessage(amount, token, recipient, destinationChain);
    }
    
    function unlockTokens(address user, address token, uint256 amount, bytes32 messageId) external onlyOwner {
        require(!processedMessages[messageId], "Message already processed");
        require(IERC20(token).balanceOf(address(this)) >= amount, "Not enough liquidity");
        
        processedMessages[messageId] = true;
        require(IERC20(token).transfer(user, amount), "Transfer failed");
        emit TokensUnlocked(user, amount, token, messageId);
    }
}